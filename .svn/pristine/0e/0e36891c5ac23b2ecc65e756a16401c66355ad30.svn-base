package com.thinkeract.tka.data.db.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "GDBANK_CARD_ITEM".
*/
public class GDBankCardItemDao extends AbstractDao<GDBankCardItem, Void> {

    public static final String TABLENAME = "GDBANK_CARD_ITEM";

    /**
     * Properties of entity GDBankCardItem.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property UserId = new Property(0, long.class, "userId", false, "USER_ID");
        public final static Property CardId = new Property(1, int.class, "cardId", false, "CARD_ID");
        public final static Property BankBranch = new Property(2, String.class, "bankBranch", false, "BANK_BRANCH");
        public final static Property BankCode = new Property(3, String.class, "bankCode", false, "BANK_CODE");
        public final static Property BankName = new Property(4, String.class, "bankName", false, "BANK_NAME");
        public final static Property Name = new Property(5, String.class, "name", false, "NAME");
        public final static Property BankImg = new Property(6, String.class, "bankImg", false, "BANK_IMG");
        public final static Property BankIcon = new Property(7, String.class, "bankIcon", false, "BANK_ICON");
    };


    public GDBankCardItemDao(DaoConfig config) {
        super(config);
    }
    
    public GDBankCardItemDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"GDBANK_CARD_ITEM\" (" + //
                "\"USER_ID\" INTEGER NOT NULL ," + // 0: userId
                "\"CARD_ID\" INTEGER NOT NULL UNIQUE ," + // 1: cardId
                "\"BANK_BRANCH\" TEXT," + // 2: bankBranch
                "\"BANK_CODE\" TEXT," + // 3: bankCode
                "\"BANK_NAME\" TEXT," + // 4: bankName
                "\"NAME\" TEXT," + // 5: name
                "\"BANK_IMG\" TEXT," + // 6: bankImg
                "\"BANK_ICON\" TEXT);"); // 7: bankIcon
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"GDBANK_CARD_ITEM\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, GDBankCardItem entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getUserId());
        stmt.bindLong(2, entity.getCardId());
 
        String bankBranch = entity.getBankBranch();
        if (bankBranch != null) {
            stmt.bindString(3, bankBranch);
        }
 
        String bankCode = entity.getBankCode();
        if (bankCode != null) {
            stmt.bindString(4, bankCode);
        }
 
        String bankName = entity.getBankName();
        if (bankName != null) {
            stmt.bindString(5, bankName);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(6, name);
        }
 
        String bankImg = entity.getBankImg();
        if (bankImg != null) {
            stmt.bindString(7, bankImg);
        }
 
        String bankIcon = entity.getBankIcon();
        if (bankIcon != null) {
            stmt.bindString(8, bankIcon);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public GDBankCardItem readEntity(Cursor cursor, int offset) {
        GDBankCardItem entity = new GDBankCardItem( //
            cursor.getLong(offset + 0), // userId
            cursor.getInt(offset + 1), // cardId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // bankBranch
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // bankCode
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // bankName
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // name
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // bankImg
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // bankIcon
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, GDBankCardItem entity, int offset) {
        entity.setUserId(cursor.getLong(offset + 0));
        entity.setCardId(cursor.getInt(offset + 1));
        entity.setBankBranch(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setBankCode(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setBankName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setBankImg(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setBankIcon(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(GDBankCardItem entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(GDBankCardItem entity) {
        return null;
    }

    /** @inheritdoc */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
