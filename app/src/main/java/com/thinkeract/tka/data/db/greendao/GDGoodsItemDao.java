package com.thinkeract.tka.data.db.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "GDGOODS_ITEM".
*/
public class GDGoodsItemDao extends AbstractDao<GDGoodsItem, Long> {

    public static final String TABLENAME = "GDGOODS_ITEM";

    /**
     * Properties of entity GDGoodsItem.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserId = new Property(1, int.class, "userId", false, "USER_ID");
        public final static Property GoodsId = new Property(2, int.class, "goodsId", false, "GOODS_ID");
        public final static Property GoodsCount = new Property(3, int.class, "goodsCount", false, "GOODS_COUNT");
        public final static Property Inventory = new Property(4, int.class, "inventory", false, "INVENTORY");
        public final static Property OriginalCount = new Property(5, int.class, "originalCount", false, "ORIGINAL_COUNT");
        public final static Property Sid = new Property(6, int.class, "sid", false, "SID");
        public final static Property Price = new Property(7, float.class, "price", false, "PRICE");
        public final static Property Freight = new Property(8, float.class, "freight", false, "FREIGHT");
        public final static Property UserGoodsId = new Property(9, String.class, "userGoodsId", false, "USER_GOODS_ID");
        public final static Property Name = new Property(10, String.class, "name", false, "NAME");
        public final static Property GoodsImg = new Property(11, String.class, "goodsImg", false, "GOODS_IMG");
        public final static Property Spec = new Property(12, String.class, "spec", false, "SPEC");
        public final static Property IsCheck = new Property(13, boolean.class, "isCheck", false, "IS_CHECK");
    };


    public GDGoodsItemDao(DaoConfig config) {
        super(config);
    }
    
    public GDGoodsItemDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"GDGOODS_ITEM\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"USER_ID\" INTEGER NOT NULL ," + // 1: userId
                "\"GOODS_ID\" INTEGER NOT NULL ," + // 2: goodsId
                "\"GOODS_COUNT\" INTEGER NOT NULL ," + // 3: goodsCount
                "\"INVENTORY\" INTEGER NOT NULL ," + // 4: inventory
                "\"ORIGINAL_COUNT\" INTEGER NOT NULL ," + // 5: originalCount
                "\"SID\" INTEGER NOT NULL ," + // 6: sid
                "\"PRICE\" REAL NOT NULL ," + // 7: price
                "\"FREIGHT\" REAL NOT NULL ," + // 8: freight
                "\"USER_GOODS_ID\" TEXT UNIQUE ," + // 9: userGoodsId
                "\"NAME\" TEXT," + // 10: name
                "\"GOODS_IMG\" TEXT," + // 11: goodsImg
                "\"SPEC\" TEXT," + // 12: spec
                "\"IS_CHECK\" INTEGER NOT NULL );"); // 13: isCheck
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"GDGOODS_ITEM\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, GDGoodsItem entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getUserId());
        stmt.bindLong(3, entity.getGoodsId());
        stmt.bindLong(4, entity.getGoodsCount());
        stmt.bindLong(5, entity.getInventory());
        stmt.bindLong(6, entity.getOriginalCount());
        stmt.bindLong(7, entity.getSid());
        stmt.bindDouble(8, entity.getPrice());
        stmt.bindDouble(9, entity.getFreight());
 
        String userGoodsId = entity.getUserGoodsId();
        if (userGoodsId != null) {
            stmt.bindString(10, userGoodsId);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(11, name);
        }
 
        String goodsImg = entity.getGoodsImg();
        if (goodsImg != null) {
            stmt.bindString(12, goodsImg);
        }
 
        String spec = entity.getSpec();
        if (spec != null) {
            stmt.bindString(13, spec);
        }
        stmt.bindLong(14, entity.getIsCheck() ? 1L: 0L);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public GDGoodsItem readEntity(Cursor cursor, int offset) {
        GDGoodsItem entity = new GDGoodsItem( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // userId
            cursor.getInt(offset + 2), // goodsId
            cursor.getInt(offset + 3), // goodsCount
            cursor.getInt(offset + 4), // inventory
            cursor.getInt(offset + 5), // originalCount
            cursor.getInt(offset + 6), // sid
            cursor.getFloat(offset + 7), // price
            cursor.getFloat(offset + 8), // freight
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // userGoodsId
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // name
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // goodsImg
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // spec
            cursor.getShort(offset + 13) != 0 // isCheck
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, GDGoodsItem entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserId(cursor.getInt(offset + 1));
        entity.setGoodsId(cursor.getInt(offset + 2));
        entity.setGoodsCount(cursor.getInt(offset + 3));
        entity.setInventory(cursor.getInt(offset + 4));
        entity.setOriginalCount(cursor.getInt(offset + 5));
        entity.setSid(cursor.getInt(offset + 6));
        entity.setPrice(cursor.getFloat(offset + 7));
        entity.setFreight(cursor.getFloat(offset + 8));
        entity.setUserGoodsId(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setName(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setGoodsImg(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setSpec(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setIsCheck(cursor.getShort(offset + 13) != 0);
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(GDGoodsItem entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(GDGoodsItem entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
