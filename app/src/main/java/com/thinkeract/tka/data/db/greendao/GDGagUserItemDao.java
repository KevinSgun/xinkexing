package com.thinkeract.tka.data.db.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "GDGAG_USER_ITEM".
*/
public class GDGagUserItemDao extends AbstractDao<GDGagUserItem, Long> {

    public static final String TABLENAME = "GDGAG_USER_ITEM";

    /**
     * Properties of entity GDGagUserItem.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserId = new Property(1, String.class, "userId", false, "USER_ID");
        public final static Property RoomId = new Property(2, String.class, "roomId", false, "ROOM_ID");
        public final static Property IsGag = new Property(3, boolean.class, "isGag", false, "IS_GAG");
        public final static Property UserName = new Property(4, String.class, "userName", false, "USER_NAME");
        public final static Property Avatar = new Property(5, String.class, "avatar", false, "AVATAR");
    };


    public GDGagUserItemDao(DaoConfig config) {
        super(config);
    }
    
    public GDGagUserItemDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"GDGAG_USER_ITEM\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"USER_ID\" TEXT UNIQUE ," + // 1: userId
                "\"ROOM_ID\" TEXT," + // 2: roomId
                "\"IS_GAG\" INTEGER NOT NULL ," + // 3: isGag
                "\"USER_NAME\" TEXT," + // 4: userName
                "\"AVATAR\" TEXT);"); // 5: avatar
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"GDGAG_USER_ITEM\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, GDGagUserItem entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(2, userId);
        }
 
        String roomId = entity.getRoomId();
        if (roomId != null) {
            stmt.bindString(3, roomId);
        }
        stmt.bindLong(4, entity.getIsGag() ? 1L: 0L);
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(5, userName);
        }
 
        String avatar = entity.getAvatar();
        if (avatar != null) {
            stmt.bindString(6, avatar);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public GDGagUserItem readEntity(Cursor cursor, int offset) {
        GDGagUserItem entity = new GDGagUserItem( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // userId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // roomId
            cursor.getShort(offset + 3) != 0, // isGag
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // userName
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // avatar
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, GDGagUserItem entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setRoomId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setIsGag(cursor.getShort(offset + 3) != 0);
        entity.setUserName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setAvatar(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(GDGagUserItem entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(GDGagUserItem entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
